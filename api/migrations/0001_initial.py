# Generated by Django 3.2.3 on 2021-05-30 10:15

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClothesSetting',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('last_name', models.CharField(max_length=30)),
                ('last_name_kana', models.CharField(max_length=60)),
                ('first_name', models.CharField(max_length=30)),
                ('first_name_kana', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='GatheringPlaceSetting',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('text', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='PositionData',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('start_hour', models.CharField(blank=True, max_length=5, null=True)),
                ('end_hour', models.CharField(blank=True, max_length=5, null=True)),
                ('male', models.IntegerField(blank=True, null=True)),
                ('female', models.IntegerField(blank=True, null=True)),
                ('unspecified', models.IntegerField(blank=True, null=True)),
                ('nullable', models.BooleanField()),
                ('clothes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.clothessetting')),
                ('gathering_place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gatheringplacesetting')),
            ],
        ),
        migrations.CreateModel(
            name='RegisteredStaff',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('staff_id', models.IntegerField()),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女'), ('unspecified', '未指定')], max_length=20)),
                ('last_name', models.CharField(max_length=30)),
                ('last_name_kana', models.CharField(max_length=60)),
                ('first_name', models.CharField(max_length=30)),
                ('first_name_kana', models.CharField(max_length=60)),
                ('birth_date', models.DateField()),
                ('registered_date', models.DateField(default=datetime.date.today)),
                ('is_active', models.BooleanField(default=True)),
                ('telephone_number', models.CharField(max_length=30)),
                ('email_address', models.CharField(max_length=250)),
                ('interviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.employee')),
            ],
        ),
        migrations.CreateModel(
            name='PositionGroup',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=250)),
                ('position_color', models.CharField(max_length=10)),
                ('default_position_data', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.positiondata')),
                ('positions', models.ManyToManyField(related_name='position_group', to='api.Position')),
            ],
        ),
        migrations.AddField(
            model_name='position',
            name='assigned_staffs',
            field=models.ManyToManyField(related_name='position', to='api.RegisteredStaff'),
        ),
        migrations.AddField(
            model_name='position',
            name='data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.positiondata'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('datetime_added', models.DateTimeField(auto_now_add=True)),
                ('datetime_last_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(max_length=250)),
                ('position_groups', models.ManyToManyField(related_name='event', to='api.PositionGroup')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
